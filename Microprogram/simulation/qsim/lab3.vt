// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/23/2020 12:52:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    lab3
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab3_vlg_sample_tst(
	DAN,
	KG,
	LX,
	sampler_tx
);
input  DAN;
input  KG;
input  LX;
output sampler_tx;

reg sample;
time current_time;
always @(DAN or KG or LX)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module lab3_vlg_check_tst (
	CLKout,
	ldout,
	qjpout,
	ramOUT,
	RR0,
	RR1,
	uIROUT,
	uPCOUT,
	ww,
	sampler_rx
);
input [3:0] CLKout;
input  ldout;
input  qjpout;
input [7:0] ramOUT;
input [7:0] RR0;
input [7:0] RR1;
input [23:0] uIROUT;
input [7:0] uPCOUT;
input [7:0] ww;
input sampler_rx;

reg [3:0] CLKout_expected;
reg  ldout_expected;
reg  qjpout_expected;
reg [7:0] ramOUT_expected;
reg [7:0] RR0_expected;
reg [7:0] RR1_expected;
reg [23:0] uIROUT_expected;
reg [7:0] uPCOUT_expected;
reg [7:0] ww_expected;

reg [3:0] CLKout_prev;
reg  ldout_prev;
reg  qjpout_prev;
reg [7:0] ramOUT_prev;
reg [7:0] RR0_prev;
reg [7:0] RR1_prev;
reg [23:0] uIROUT_prev;
reg [7:0] uPCOUT_prev;
reg [7:0] ww_prev;

reg [3:0] CLKout_expected_prev;
reg  ldout_expected_prev;
reg  qjpout_expected_prev;
reg [7:0] ramOUT_expected_prev;
reg [7:0] RR0_expected_prev;
reg [7:0] RR1_expected_prev;
reg [23:0] uIROUT_expected_prev;
reg [7:0] uPCOUT_expected_prev;
reg [7:0] ww_expected_prev;

reg [3:0] last_CLKout_exp;
reg  last_ldout_exp;
reg  last_qjpout_exp;
reg [7:0] last_ramOUT_exp;
reg [7:0] last_RR0_exp;
reg [7:0] last_RR1_exp;
reg [23:0] last_uIROUT_exp;
reg [7:0] last_uPCOUT_exp;
reg [7:0] last_ww_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	CLKout_prev = CLKout;
	ldout_prev = ldout;
	qjpout_prev = qjpout;
	ramOUT_prev = ramOUT;
	RR0_prev = RR0;
	RR1_prev = RR1;
	uIROUT_prev = uIROUT;
	uPCOUT_prev = uPCOUT;
	ww_prev = ww;
end

// update expected /o prevs

always @(trigger)
begin
	CLKout_expected_prev = CLKout_expected;
	ldout_expected_prev = ldout_expected;
	qjpout_expected_prev = qjpout_expected;
	ramOUT_expected_prev = ramOUT_expected;
	RR0_expected_prev = RR0_expected;
	RR1_expected_prev = RR1_expected;
	uIROUT_expected_prev = uIROUT_expected;
	uPCOUT_expected_prev = uPCOUT_expected;
	ww_expected_prev = ww_expected;
end


// expected ramOUT[ 7 ]
initial
begin
	ramOUT_expected[7] = 1'bX;
end 
// expected ramOUT[ 6 ]
initial
begin
	ramOUT_expected[6] = 1'bX;
end 
// expected ramOUT[ 5 ]
initial
begin
	ramOUT_expected[5] = 1'bX;
end 
// expected ramOUT[ 4 ]
initial
begin
	ramOUT_expected[4] = 1'bX;
end 
// expected ramOUT[ 3 ]
initial
begin
	ramOUT_expected[3] = 1'bX;
end 
// expected ramOUT[ 2 ]
initial
begin
	ramOUT_expected[2] = 1'bX;
end 
// expected ramOUT[ 1 ]
initial
begin
	ramOUT_expected[1] = 1'bX;
end 
// expected ramOUT[ 0 ]
initial
begin
	ramOUT_expected[0] = 1'bX;
end 
// expected RR0[ 7 ]
initial
begin
	RR0_expected[7] = 1'bX;
end 
// expected RR0[ 6 ]
initial
begin
	RR0_expected[6] = 1'bX;
end 
// expected RR0[ 5 ]
initial
begin
	RR0_expected[5] = 1'bX;
end 
// expected RR0[ 4 ]
initial
begin
	RR0_expected[4] = 1'bX;
end 
// expected RR0[ 3 ]
initial
begin
	RR0_expected[3] = 1'bX;
end 
// expected RR0[ 2 ]
initial
begin
	RR0_expected[2] = 1'bX;
end 
// expected RR0[ 1 ]
initial
begin
	RR0_expected[1] = 1'bX;
end 
// expected RR0[ 0 ]
initial
begin
	RR0_expected[0] = 1'bX;
end 
// expected RR1[ 7 ]
initial
begin
	RR1_expected[7] = 1'bX;
end 
// expected RR1[ 6 ]
initial
begin
	RR1_expected[6] = 1'bX;
end 
// expected RR1[ 5 ]
initial
begin
	RR1_expected[5] = 1'bX;
end 
// expected RR1[ 4 ]
initial
begin
	RR1_expected[4] = 1'bX;
end 
// expected RR1[ 3 ]
initial
begin
	RR1_expected[3] = 1'bX;
end 
// expected RR1[ 2 ]
initial
begin
	RR1_expected[2] = 1'bX;
end 
// expected RR1[ 1 ]
initial
begin
	RR1_expected[1] = 1'bX;
end 
// expected RR1[ 0 ]
initial
begin
	RR1_expected[0] = 1'bX;
end 
// expected uIROUT[ 23 ]
initial
begin
	uIROUT_expected[23] = 1'bX;
end 
// expected uIROUT[ 22 ]
initial
begin
	uIROUT_expected[22] = 1'bX;
end 
// expected uIROUT[ 21 ]
initial
begin
	uIROUT_expected[21] = 1'bX;
end 
// expected uIROUT[ 20 ]
initial
begin
	uIROUT_expected[20] = 1'bX;
end 
// expected uIROUT[ 19 ]
initial
begin
	uIROUT_expected[19] = 1'bX;
end 
// expected uIROUT[ 18 ]
initial
begin
	uIROUT_expected[18] = 1'bX;
end 
// expected uIROUT[ 17 ]
initial
begin
	uIROUT_expected[17] = 1'bX;
end 
// expected uIROUT[ 16 ]
initial
begin
	uIROUT_expected[16] = 1'bX;
end 
// expected uIROUT[ 15 ]
initial
begin
	uIROUT_expected[15] = 1'bX;
end 
// expected uIROUT[ 14 ]
initial
begin
	uIROUT_expected[14] = 1'bX;
end 
// expected uIROUT[ 13 ]
initial
begin
	uIROUT_expected[13] = 1'bX;
end 
// expected uIROUT[ 12 ]
initial
begin
	uIROUT_expected[12] = 1'bX;
end 
// expected uIROUT[ 11 ]
initial
begin
	uIROUT_expected[11] = 1'bX;
end 
// expected uIROUT[ 10 ]
initial
begin
	uIROUT_expected[10] = 1'bX;
end 
// expected uIROUT[ 9 ]
initial
begin
	uIROUT_expected[9] = 1'bX;
end 
// expected uIROUT[ 8 ]
initial
begin
	uIROUT_expected[8] = 1'bX;
end 
// expected uIROUT[ 7 ]
initial
begin
	uIROUT_expected[7] = 1'bX;
end 
// expected uIROUT[ 6 ]
initial
begin
	uIROUT_expected[6] = 1'bX;
end 
// expected uIROUT[ 5 ]
initial
begin
	uIROUT_expected[5] = 1'bX;
end 
// expected uIROUT[ 4 ]
initial
begin
	uIROUT_expected[4] = 1'bX;
end 
// expected uIROUT[ 3 ]
initial
begin
	uIROUT_expected[3] = 1'bX;
end 
// expected uIROUT[ 2 ]
initial
begin
	uIROUT_expected[2] = 1'bX;
end 
// expected uIROUT[ 1 ]
initial
begin
	uIROUT_expected[1] = 1'bX;
end 
// expected uIROUT[ 0 ]
initial
begin
	uIROUT_expected[0] = 1'bX;
end 
// expected uPCOUT[ 7 ]
initial
begin
	uPCOUT_expected[7] = 1'bX;
end 
// expected uPCOUT[ 6 ]
initial
begin
	uPCOUT_expected[6] = 1'bX;
end 
// expected uPCOUT[ 5 ]
initial
begin
	uPCOUT_expected[5] = 1'bX;
end 
// expected uPCOUT[ 4 ]
initial
begin
	uPCOUT_expected[4] = 1'bX;
end 
// expected uPCOUT[ 3 ]
initial
begin
	uPCOUT_expected[3] = 1'bX;
end 
// expected uPCOUT[ 2 ]
initial
begin
	uPCOUT_expected[2] = 1'bX;
end 
// expected uPCOUT[ 1 ]
initial
begin
	uPCOUT_expected[1] = 1'bX;
end 
// expected uPCOUT[ 0 ]
initial
begin
	uPCOUT_expected[0] = 1'bX;
end 
// expected ww[ 7 ]
initial
begin
	ww_expected[7] = 1'bX;
end 
// expected ww[ 6 ]
initial
begin
	ww_expected[6] = 1'bX;
end 
// expected ww[ 5 ]
initial
begin
	ww_expected[5] = 1'bX;
end 
// expected ww[ 4 ]
initial
begin
	ww_expected[4] = 1'bX;
end 
// expected ww[ 3 ]
initial
begin
	ww_expected[3] = 1'bX;
end 
// expected ww[ 2 ]
initial
begin
	ww_expected[2] = 1'bX;
end 
// expected ww[ 1 ]
initial
begin
	ww_expected[1] = 1'bX;
end 
// expected ww[ 0 ]
initial
begin
	ww_expected[0] = 1'bX;
end 

// expected ldout
initial
begin
	ldout_expected = 1'bX;
end 

// expected qjpout
initial
begin
	qjpout_expected = 1'bX;
end 
// expected CLKout[ 3 ]
initial
begin
	CLKout_expected[3] = 1'bX;
end 
// expected CLKout[ 2 ]
initial
begin
	CLKout_expected[2] = 1'bX;
end 
// expected CLKout[ 1 ]
initial
begin
	CLKout_expected[1] = 1'bX;
end 
// expected CLKout[ 0 ]
initial
begin
	CLKout_expected[0] = 1'bX;
end 
// generate trigger
always @(CLKout_expected or CLKout or ldout_expected or ldout or qjpout_expected or qjpout or ramOUT_expected or ramOUT or RR0_expected or RR0 or RR1_expected or RR1 or uIROUT_expected or uIROUT or uPCOUT_expected or uPCOUT or ww_expected or ww)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected CLKout = %b | expected ldout = %b | expected qjpout = %b | expected ramOUT = %b | expected RR0 = %b | expected RR1 = %b | expected uIROUT = %b | expected uPCOUT = %b | expected ww = %b | ",CLKout_expected_prev,ldout_expected_prev,qjpout_expected_prev,ramOUT_expected_prev,RR0_expected_prev,RR1_expected_prev,uIROUT_expected_prev,uPCOUT_expected_prev,ww_expected_prev);
	$display("| real CLKout = %b | real ldout = %b | real qjpout = %b | real ramOUT = %b | real RR0 = %b | real RR1 = %b | real uIROUT = %b | real uPCOUT = %b | real ww = %b | ",CLKout_prev,ldout_prev,qjpout_prev,ramOUT_prev,RR0_prev,RR1_prev,uIROUT_prev,uPCOUT_prev,ww_prev);
`endif
	if (
		( CLKout_expected_prev[0] !== 1'bx ) && ( CLKout_prev[0] !== CLKout_expected_prev[0] )
		&& ((CLKout_expected_prev[0] !== last_CLKout_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLKout[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLKout_expected_prev);
		$display ("     Real value = %b", CLKout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLKout_exp[0] = CLKout_expected_prev[0];
	end
	if (
		( CLKout_expected_prev[1] !== 1'bx ) && ( CLKout_prev[1] !== CLKout_expected_prev[1] )
		&& ((CLKout_expected_prev[1] !== last_CLKout_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLKout[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLKout_expected_prev);
		$display ("     Real value = %b", CLKout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLKout_exp[1] = CLKout_expected_prev[1];
	end
	if (
		( CLKout_expected_prev[2] !== 1'bx ) && ( CLKout_prev[2] !== CLKout_expected_prev[2] )
		&& ((CLKout_expected_prev[2] !== last_CLKout_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLKout[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLKout_expected_prev);
		$display ("     Real value = %b", CLKout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLKout_exp[2] = CLKout_expected_prev[2];
	end
	if (
		( CLKout_expected_prev[3] !== 1'bx ) && ( CLKout_prev[3] !== CLKout_expected_prev[3] )
		&& ((CLKout_expected_prev[3] !== last_CLKout_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port CLKout[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", CLKout_expected_prev);
		$display ("     Real value = %b", CLKout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_CLKout_exp[3] = CLKout_expected_prev[3];
	end
	if (
		( ldout_expected_prev !== 1'bx ) && ( ldout_prev !== ldout_expected_prev )
		&& ((ldout_expected_prev !== last_ldout_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ldout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ldout_expected_prev);
		$display ("     Real value = %b", ldout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_ldout_exp = ldout_expected_prev;
	end
	if (
		( qjpout_expected_prev !== 1'bx ) && ( qjpout_prev !== qjpout_expected_prev )
		&& ((qjpout_expected_prev !== last_qjpout_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port qjpout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", qjpout_expected_prev);
		$display ("     Real value = %b", qjpout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_qjpout_exp = qjpout_expected_prev;
	end
	if (
		( ramOUT_expected_prev[0] !== 1'bx ) && ( ramOUT_prev[0] !== ramOUT_expected_prev[0] )
		&& ((ramOUT_expected_prev[0] !== last_ramOUT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOUT_expected_prev);
		$display ("     Real value = %b", ramOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ramOUT_exp[0] = ramOUT_expected_prev[0];
	end
	if (
		( ramOUT_expected_prev[1] !== 1'bx ) && ( ramOUT_prev[1] !== ramOUT_expected_prev[1] )
		&& ((ramOUT_expected_prev[1] !== last_ramOUT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOUT_expected_prev);
		$display ("     Real value = %b", ramOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ramOUT_exp[1] = ramOUT_expected_prev[1];
	end
	if (
		( ramOUT_expected_prev[2] !== 1'bx ) && ( ramOUT_prev[2] !== ramOUT_expected_prev[2] )
		&& ((ramOUT_expected_prev[2] !== last_ramOUT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOUT_expected_prev);
		$display ("     Real value = %b", ramOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ramOUT_exp[2] = ramOUT_expected_prev[2];
	end
	if (
		( ramOUT_expected_prev[3] !== 1'bx ) && ( ramOUT_prev[3] !== ramOUT_expected_prev[3] )
		&& ((ramOUT_expected_prev[3] !== last_ramOUT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOUT_expected_prev);
		$display ("     Real value = %b", ramOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ramOUT_exp[3] = ramOUT_expected_prev[3];
	end
	if (
		( ramOUT_expected_prev[4] !== 1'bx ) && ( ramOUT_prev[4] !== ramOUT_expected_prev[4] )
		&& ((ramOUT_expected_prev[4] !== last_ramOUT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOUT_expected_prev);
		$display ("     Real value = %b", ramOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ramOUT_exp[4] = ramOUT_expected_prev[4];
	end
	if (
		( ramOUT_expected_prev[5] !== 1'bx ) && ( ramOUT_prev[5] !== ramOUT_expected_prev[5] )
		&& ((ramOUT_expected_prev[5] !== last_ramOUT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOUT_expected_prev);
		$display ("     Real value = %b", ramOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ramOUT_exp[5] = ramOUT_expected_prev[5];
	end
	if (
		( ramOUT_expected_prev[6] !== 1'bx ) && ( ramOUT_prev[6] !== ramOUT_expected_prev[6] )
		&& ((ramOUT_expected_prev[6] !== last_ramOUT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOUT_expected_prev);
		$display ("     Real value = %b", ramOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ramOUT_exp[6] = ramOUT_expected_prev[6];
	end
	if (
		( ramOUT_expected_prev[7] !== 1'bx ) && ( ramOUT_prev[7] !== ramOUT_expected_prev[7] )
		&& ((ramOUT_expected_prev[7] !== last_ramOUT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ramOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ramOUT_expected_prev);
		$display ("     Real value = %b", ramOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_ramOUT_exp[7] = ramOUT_expected_prev[7];
	end
	if (
		( RR0_expected_prev[0] !== 1'bx ) && ( RR0_prev[0] !== RR0_expected_prev[0] )
		&& ((RR0_expected_prev[0] !== last_RR0_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR0_expected_prev);
		$display ("     Real value = %b", RR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RR0_exp[0] = RR0_expected_prev[0];
	end
	if (
		( RR0_expected_prev[1] !== 1'bx ) && ( RR0_prev[1] !== RR0_expected_prev[1] )
		&& ((RR0_expected_prev[1] !== last_RR0_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR0_expected_prev);
		$display ("     Real value = %b", RR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RR0_exp[1] = RR0_expected_prev[1];
	end
	if (
		( RR0_expected_prev[2] !== 1'bx ) && ( RR0_prev[2] !== RR0_expected_prev[2] )
		&& ((RR0_expected_prev[2] !== last_RR0_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR0_expected_prev);
		$display ("     Real value = %b", RR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RR0_exp[2] = RR0_expected_prev[2];
	end
	if (
		( RR0_expected_prev[3] !== 1'bx ) && ( RR0_prev[3] !== RR0_expected_prev[3] )
		&& ((RR0_expected_prev[3] !== last_RR0_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR0_expected_prev);
		$display ("     Real value = %b", RR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RR0_exp[3] = RR0_expected_prev[3];
	end
	if (
		( RR0_expected_prev[4] !== 1'bx ) && ( RR0_prev[4] !== RR0_expected_prev[4] )
		&& ((RR0_expected_prev[4] !== last_RR0_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR0_expected_prev);
		$display ("     Real value = %b", RR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RR0_exp[4] = RR0_expected_prev[4];
	end
	if (
		( RR0_expected_prev[5] !== 1'bx ) && ( RR0_prev[5] !== RR0_expected_prev[5] )
		&& ((RR0_expected_prev[5] !== last_RR0_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR0_expected_prev);
		$display ("     Real value = %b", RR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RR0_exp[5] = RR0_expected_prev[5];
	end
	if (
		( RR0_expected_prev[6] !== 1'bx ) && ( RR0_prev[6] !== RR0_expected_prev[6] )
		&& ((RR0_expected_prev[6] !== last_RR0_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR0_expected_prev);
		$display ("     Real value = %b", RR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RR0_exp[6] = RR0_expected_prev[6];
	end
	if (
		( RR0_expected_prev[7] !== 1'bx ) && ( RR0_prev[7] !== RR0_expected_prev[7] )
		&& ((RR0_expected_prev[7] !== last_RR0_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR0_expected_prev);
		$display ("     Real value = %b", RR0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_RR0_exp[7] = RR0_expected_prev[7];
	end
	if (
		( RR1_expected_prev[0] !== 1'bx ) && ( RR1_prev[0] !== RR1_expected_prev[0] )
		&& ((RR1_expected_prev[0] !== last_RR1_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR1_expected_prev);
		$display ("     Real value = %b", RR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RR1_exp[0] = RR1_expected_prev[0];
	end
	if (
		( RR1_expected_prev[1] !== 1'bx ) && ( RR1_prev[1] !== RR1_expected_prev[1] )
		&& ((RR1_expected_prev[1] !== last_RR1_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR1_expected_prev);
		$display ("     Real value = %b", RR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RR1_exp[1] = RR1_expected_prev[1];
	end
	if (
		( RR1_expected_prev[2] !== 1'bx ) && ( RR1_prev[2] !== RR1_expected_prev[2] )
		&& ((RR1_expected_prev[2] !== last_RR1_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR1_expected_prev);
		$display ("     Real value = %b", RR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RR1_exp[2] = RR1_expected_prev[2];
	end
	if (
		( RR1_expected_prev[3] !== 1'bx ) && ( RR1_prev[3] !== RR1_expected_prev[3] )
		&& ((RR1_expected_prev[3] !== last_RR1_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR1_expected_prev);
		$display ("     Real value = %b", RR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RR1_exp[3] = RR1_expected_prev[3];
	end
	if (
		( RR1_expected_prev[4] !== 1'bx ) && ( RR1_prev[4] !== RR1_expected_prev[4] )
		&& ((RR1_expected_prev[4] !== last_RR1_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR1_expected_prev);
		$display ("     Real value = %b", RR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RR1_exp[4] = RR1_expected_prev[4];
	end
	if (
		( RR1_expected_prev[5] !== 1'bx ) && ( RR1_prev[5] !== RR1_expected_prev[5] )
		&& ((RR1_expected_prev[5] !== last_RR1_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR1_expected_prev);
		$display ("     Real value = %b", RR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RR1_exp[5] = RR1_expected_prev[5];
	end
	if (
		( RR1_expected_prev[6] !== 1'bx ) && ( RR1_prev[6] !== RR1_expected_prev[6] )
		&& ((RR1_expected_prev[6] !== last_RR1_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR1_expected_prev);
		$display ("     Real value = %b", RR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RR1_exp[6] = RR1_expected_prev[6];
	end
	if (
		( RR1_expected_prev[7] !== 1'bx ) && ( RR1_prev[7] !== RR1_expected_prev[7] )
		&& ((RR1_expected_prev[7] !== last_RR1_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RR1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RR1_expected_prev);
		$display ("     Real value = %b", RR1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_RR1_exp[7] = RR1_expected_prev[7];
	end
	if (
		( uIROUT_expected_prev[0] !== 1'bx ) && ( uIROUT_prev[0] !== uIROUT_expected_prev[0] )
		&& ((uIROUT_expected_prev[0] !== last_uIROUT_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[0] = uIROUT_expected_prev[0];
	end
	if (
		( uIROUT_expected_prev[1] !== 1'bx ) && ( uIROUT_prev[1] !== uIROUT_expected_prev[1] )
		&& ((uIROUT_expected_prev[1] !== last_uIROUT_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[1] = uIROUT_expected_prev[1];
	end
	if (
		( uIROUT_expected_prev[2] !== 1'bx ) && ( uIROUT_prev[2] !== uIROUT_expected_prev[2] )
		&& ((uIROUT_expected_prev[2] !== last_uIROUT_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[2] = uIROUT_expected_prev[2];
	end
	if (
		( uIROUT_expected_prev[3] !== 1'bx ) && ( uIROUT_prev[3] !== uIROUT_expected_prev[3] )
		&& ((uIROUT_expected_prev[3] !== last_uIROUT_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[3] = uIROUT_expected_prev[3];
	end
	if (
		( uIROUT_expected_prev[4] !== 1'bx ) && ( uIROUT_prev[4] !== uIROUT_expected_prev[4] )
		&& ((uIROUT_expected_prev[4] !== last_uIROUT_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[4] = uIROUT_expected_prev[4];
	end
	if (
		( uIROUT_expected_prev[5] !== 1'bx ) && ( uIROUT_prev[5] !== uIROUT_expected_prev[5] )
		&& ((uIROUT_expected_prev[5] !== last_uIROUT_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[5] = uIROUT_expected_prev[5];
	end
	if (
		( uIROUT_expected_prev[6] !== 1'bx ) && ( uIROUT_prev[6] !== uIROUT_expected_prev[6] )
		&& ((uIROUT_expected_prev[6] !== last_uIROUT_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[6] = uIROUT_expected_prev[6];
	end
	if (
		( uIROUT_expected_prev[7] !== 1'bx ) && ( uIROUT_prev[7] !== uIROUT_expected_prev[7] )
		&& ((uIROUT_expected_prev[7] !== last_uIROUT_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[7] = uIROUT_expected_prev[7];
	end
	if (
		( uIROUT_expected_prev[8] !== 1'bx ) && ( uIROUT_prev[8] !== uIROUT_expected_prev[8] )
		&& ((uIROUT_expected_prev[8] !== last_uIROUT_exp[8]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[8] = uIROUT_expected_prev[8];
	end
	if (
		( uIROUT_expected_prev[9] !== 1'bx ) && ( uIROUT_prev[9] !== uIROUT_expected_prev[9] )
		&& ((uIROUT_expected_prev[9] !== last_uIROUT_exp[9]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[9] = uIROUT_expected_prev[9];
	end
	if (
		( uIROUT_expected_prev[10] !== 1'bx ) && ( uIROUT_prev[10] !== uIROUT_expected_prev[10] )
		&& ((uIROUT_expected_prev[10] !== last_uIROUT_exp[10]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[10] = uIROUT_expected_prev[10];
	end
	if (
		( uIROUT_expected_prev[11] !== 1'bx ) && ( uIROUT_prev[11] !== uIROUT_expected_prev[11] )
		&& ((uIROUT_expected_prev[11] !== last_uIROUT_exp[11]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[11] = uIROUT_expected_prev[11];
	end
	if (
		( uIROUT_expected_prev[12] !== 1'bx ) && ( uIROUT_prev[12] !== uIROUT_expected_prev[12] )
		&& ((uIROUT_expected_prev[12] !== last_uIROUT_exp[12]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[12] = uIROUT_expected_prev[12];
	end
	if (
		( uIROUT_expected_prev[13] !== 1'bx ) && ( uIROUT_prev[13] !== uIROUT_expected_prev[13] )
		&& ((uIROUT_expected_prev[13] !== last_uIROUT_exp[13]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[13] = uIROUT_expected_prev[13];
	end
	if (
		( uIROUT_expected_prev[14] !== 1'bx ) && ( uIROUT_prev[14] !== uIROUT_expected_prev[14] )
		&& ((uIROUT_expected_prev[14] !== last_uIROUT_exp[14]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[14] = uIROUT_expected_prev[14];
	end
	if (
		( uIROUT_expected_prev[15] !== 1'bx ) && ( uIROUT_prev[15] !== uIROUT_expected_prev[15] )
		&& ((uIROUT_expected_prev[15] !== last_uIROUT_exp[15]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[15] = uIROUT_expected_prev[15];
	end
	if (
		( uIROUT_expected_prev[16] !== 1'bx ) && ( uIROUT_prev[16] !== uIROUT_expected_prev[16] )
		&& ((uIROUT_expected_prev[16] !== last_uIROUT_exp[16]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[16] = uIROUT_expected_prev[16];
	end
	if (
		( uIROUT_expected_prev[17] !== 1'bx ) && ( uIROUT_prev[17] !== uIROUT_expected_prev[17] )
		&& ((uIROUT_expected_prev[17] !== last_uIROUT_exp[17]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[17] = uIROUT_expected_prev[17];
	end
	if (
		( uIROUT_expected_prev[18] !== 1'bx ) && ( uIROUT_prev[18] !== uIROUT_expected_prev[18] )
		&& ((uIROUT_expected_prev[18] !== last_uIROUT_exp[18]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[18] = uIROUT_expected_prev[18];
	end
	if (
		( uIROUT_expected_prev[19] !== 1'bx ) && ( uIROUT_prev[19] !== uIROUT_expected_prev[19] )
		&& ((uIROUT_expected_prev[19] !== last_uIROUT_exp[19]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[19] = uIROUT_expected_prev[19];
	end
	if (
		( uIROUT_expected_prev[20] !== 1'bx ) && ( uIROUT_prev[20] !== uIROUT_expected_prev[20] )
		&& ((uIROUT_expected_prev[20] !== last_uIROUT_exp[20]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[20] = uIROUT_expected_prev[20];
	end
	if (
		( uIROUT_expected_prev[21] !== 1'bx ) && ( uIROUT_prev[21] !== uIROUT_expected_prev[21] )
		&& ((uIROUT_expected_prev[21] !== last_uIROUT_exp[21]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[21] = uIROUT_expected_prev[21];
	end
	if (
		( uIROUT_expected_prev[22] !== 1'bx ) && ( uIROUT_prev[22] !== uIROUT_expected_prev[22] )
		&& ((uIROUT_expected_prev[22] !== last_uIROUT_exp[22]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[22] = uIROUT_expected_prev[22];
	end
	if (
		( uIROUT_expected_prev[23] !== 1'bx ) && ( uIROUT_prev[23] !== uIROUT_expected_prev[23] )
		&& ((uIROUT_expected_prev[23] !== last_uIROUT_exp[23]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uIROUT[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uIROUT_expected_prev);
		$display ("     Real value = %b", uIROUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_uIROUT_exp[23] = uIROUT_expected_prev[23];
	end
	if (
		( uPCOUT_expected_prev[0] !== 1'bx ) && ( uPCOUT_prev[0] !== uPCOUT_expected_prev[0] )
		&& ((uPCOUT_expected_prev[0] !== last_uPCOUT_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPCOUT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPCOUT_expected_prev);
		$display ("     Real value = %b", uPCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_uPCOUT_exp[0] = uPCOUT_expected_prev[0];
	end
	if (
		( uPCOUT_expected_prev[1] !== 1'bx ) && ( uPCOUT_prev[1] !== uPCOUT_expected_prev[1] )
		&& ((uPCOUT_expected_prev[1] !== last_uPCOUT_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPCOUT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPCOUT_expected_prev);
		$display ("     Real value = %b", uPCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_uPCOUT_exp[1] = uPCOUT_expected_prev[1];
	end
	if (
		( uPCOUT_expected_prev[2] !== 1'bx ) && ( uPCOUT_prev[2] !== uPCOUT_expected_prev[2] )
		&& ((uPCOUT_expected_prev[2] !== last_uPCOUT_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPCOUT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPCOUT_expected_prev);
		$display ("     Real value = %b", uPCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_uPCOUT_exp[2] = uPCOUT_expected_prev[2];
	end
	if (
		( uPCOUT_expected_prev[3] !== 1'bx ) && ( uPCOUT_prev[3] !== uPCOUT_expected_prev[3] )
		&& ((uPCOUT_expected_prev[3] !== last_uPCOUT_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPCOUT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPCOUT_expected_prev);
		$display ("     Real value = %b", uPCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_uPCOUT_exp[3] = uPCOUT_expected_prev[3];
	end
	if (
		( uPCOUT_expected_prev[4] !== 1'bx ) && ( uPCOUT_prev[4] !== uPCOUT_expected_prev[4] )
		&& ((uPCOUT_expected_prev[4] !== last_uPCOUT_exp[4]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPCOUT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPCOUT_expected_prev);
		$display ("     Real value = %b", uPCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_uPCOUT_exp[4] = uPCOUT_expected_prev[4];
	end
	if (
		( uPCOUT_expected_prev[5] !== 1'bx ) && ( uPCOUT_prev[5] !== uPCOUT_expected_prev[5] )
		&& ((uPCOUT_expected_prev[5] !== last_uPCOUT_exp[5]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPCOUT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPCOUT_expected_prev);
		$display ("     Real value = %b", uPCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_uPCOUT_exp[5] = uPCOUT_expected_prev[5];
	end
	if (
		( uPCOUT_expected_prev[6] !== 1'bx ) && ( uPCOUT_prev[6] !== uPCOUT_expected_prev[6] )
		&& ((uPCOUT_expected_prev[6] !== last_uPCOUT_exp[6]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPCOUT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPCOUT_expected_prev);
		$display ("     Real value = %b", uPCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_uPCOUT_exp[6] = uPCOUT_expected_prev[6];
	end
	if (
		( uPCOUT_expected_prev[7] !== 1'bx ) && ( uPCOUT_prev[7] !== uPCOUT_expected_prev[7] )
		&& ((uPCOUT_expected_prev[7] !== last_uPCOUT_exp[7]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port uPCOUT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", uPCOUT_expected_prev);
		$display ("     Real value = %b", uPCOUT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_uPCOUT_exp[7] = uPCOUT_expected_prev[7];
	end
	if (
		( ww_expected_prev[0] !== 1'bx ) && ( ww_prev[0] !== ww_expected_prev[0] )
		&& ((ww_expected_prev[0] !== last_ww_exp[0]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ww[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ww_expected_prev);
		$display ("     Real value = %b", ww_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ww_exp[0] = ww_expected_prev[0];
	end
	if (
		( ww_expected_prev[1] !== 1'bx ) && ( ww_prev[1] !== ww_expected_prev[1] )
		&& ((ww_expected_prev[1] !== last_ww_exp[1]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ww[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ww_expected_prev);
		$display ("     Real value = %b", ww_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ww_exp[1] = ww_expected_prev[1];
	end
	if (
		( ww_expected_prev[2] !== 1'bx ) && ( ww_prev[2] !== ww_expected_prev[2] )
		&& ((ww_expected_prev[2] !== last_ww_exp[2]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ww[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ww_expected_prev);
		$display ("     Real value = %b", ww_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ww_exp[2] = ww_expected_prev[2];
	end
	if (
		( ww_expected_prev[3] !== 1'bx ) && ( ww_prev[3] !== ww_expected_prev[3] )
		&& ((ww_expected_prev[3] !== last_ww_exp[3]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ww[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ww_expected_prev);
		$display ("     Real value = %b", ww_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ww_exp[3] = ww_expected_prev[3];
	end
	if (
		( ww_expected_prev[4] !== 1'bx ) && ( ww_prev[4] !== ww_expected_prev[4] )
		&& ((ww_expected_prev[4] !== last_ww_exp[4]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ww[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ww_expected_prev);
		$display ("     Real value = %b", ww_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ww_exp[4] = ww_expected_prev[4];
	end
	if (
		( ww_expected_prev[5] !== 1'bx ) && ( ww_prev[5] !== ww_expected_prev[5] )
		&& ((ww_expected_prev[5] !== last_ww_exp[5]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ww[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ww_expected_prev);
		$display ("     Real value = %b", ww_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ww_exp[5] = ww_expected_prev[5];
	end
	if (
		( ww_expected_prev[6] !== 1'bx ) && ( ww_prev[6] !== ww_expected_prev[6] )
		&& ((ww_expected_prev[6] !== last_ww_exp[6]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ww[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ww_expected_prev);
		$display ("     Real value = %b", ww_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ww_exp[6] = ww_expected_prev[6];
	end
	if (
		( ww_expected_prev[7] !== 1'bx ) && ( ww_prev[7] !== ww_expected_prev[7] )
		&& ((ww_expected_prev[7] !== last_ww_exp[7]) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ww[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ww_expected_prev);
		$display ("     Real value = %b", ww_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_ww_exp[7] = ww_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module lab3_vlg_vec_tst();
// constants                                           
// general purpose registers
reg DAN;
reg KG;
reg LX;
// wires                                               
wire [3:0] CLKout;
wire ldout;
wire qjpout;
wire [7:0] ramOUT;
wire [7:0] RR0;
wire [7:0] RR1;
wire [23:0] uIROUT;
wire [7:0] uPCOUT;
wire [7:0] ww;

wire sampler;                             

// assign statements (if any)                          
lab3 i1 (
// port map - connection between master ports and signals/registers   
	.CLKout(CLKout),
	.DAN(DAN),
	.KG(KG),
	.ldout(ldout),
	.LX(LX),
	.qjpout(qjpout),
	.ramOUT(ramOUT),
	.RR0(RR0),
	.RR1(RR1),
	.uIROUT(uIROUT),
	.uPCOUT(uPCOUT),
	.ww(ww)
);

// DAN
initial
begin
	DAN = 1'b0;
	DAN = #70000 1'b1;
	DAN = #10000 1'b0;
end 

// KG
initial
begin
	KG = 1'b1;
end 

// LX
always
begin
	LX = 1'b0;
	LX = #5000 1'b1;
	#5000;
end 

lab3_vlg_sample_tst tb_sample (
	.DAN(DAN),
	.KG(KG),
	.LX(LX),
	.sampler_tx(sampler)
);

lab3_vlg_check_tst tb_out(
	.CLKout(CLKout),
	.ldout(ldout),
	.qjpout(qjpout),
	.ramOUT(ramOUT),
	.RR0(RR0),
	.RR1(RR1),
	.uIROUT(uIROUT),
	.uPCOUT(uPCOUT),
	.ww(ww),
	.sampler_rx(sampler)
);
endmodule

